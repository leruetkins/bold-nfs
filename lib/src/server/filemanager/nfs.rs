// This file is automatically @generated by nfs-codegen
// Do not manually edit!

#![allow(non_camel_case_types)]
#![allow(clippy::upper_case_acronyms)]

use serde::{Deserialize, Serialize};

#[derive(Clone, Copy, Debug, Deserialize, Eq, PartialEq, Serialize, Default)]
#[repr(u32)]
pub enum ftype3 {
    #[default]
    NF3REG = 1,
    NF3DIR = 2,
    NF3BLK = 3,
    NF3CHR = 4,
    NF3LNK = 5,
    NF3SOCK = 6,
    NF3FIFO = 7,
}

#[derive(Clone, Copy, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct specdata3 {
    pub specdata1: u32,
    pub specdata2: u32,
}

#[derive(Clone, Copy, Debug, Deserialize, Eq, PartialEq, Serialize)]
#[derive(Default)]
pub struct nfstime3 {
    pub seconds: u32,
    pub nseconds: u32,
}

#[derive(Clone, Copy, Debug, Deserialize, Eq, PartialEq, Serialize)]
#[derive(Default)]
pub struct fattr3 {
    pub ftype: ftype3,
    pub mode: u32,
    pub nlink: u32,
    pub uid: u32,
    pub gid: u32,
    pub size: u64,
    pub used: u64,
    pub rdev: specdata3,
    pub fsid: u64,
    pub fileid: u64,
    pub atime: nfstime3,
    pub mtime: nfstime3,
    pub ctime: nfstime3,
}

pub type nfs_fh3 = Vec<u8>;
pub type filename3 = Vec<u8>;
pub type fileid3 = u64;
pub type cookie3 = u64;
pub type cookieverf3 = [u8; 8];
pub type createverf3 = [u8; 8];
pub type writeverf3 = [u8; 8];
pub type uid3 = u32;
pub type gid3 = u32;
pub type size3 = u64;
pub type nfspath3 = Vec<u8>;

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct nfssvcaddr3 {
    pub addr: Vec<u8>,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct nfsaclattr3 {
    pub ace_count: u32,
    pub ace_size: u32,
    pub ace_data: Vec<u8>,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
#[repr(u32)]
pub enum nfsstat3 {
    NFS3_OK = 0,
    NFS3ERR_PERM = 1,
    NFS3ERR_NOENT = 2,
    NFS3ERR_IO = 5,
    NFS3ERR_NXIO = 6,
    NFS3ERR_ACCES = 13,
    NFS3ERR_EXIST = 17,
    NFS3ERR_XDEV = 18,
    NFS3ERR_NODEV = 19,
    NFS3ERR_NOTDIR = 20,
    NFS3ERR_ISDIR = 21,
    NFS3ERR_INVAL = 22,
    NFS3ERR_FBIG = 27,
    NFS3ERR_NOSPC = 28,
    NFS3ERR_ROFS = 30,
    NFS3ERR_MLINK = 31,
    NFS3ERR_NAMETOOLONG = 63,
    NFS3ERR_NOTEMPTY = 72,
    NFS3ERR_DQUOT = 69,
    NFS3ERR_STALE = 70,
    NFS3ERR_REMOTE = 71,
    NFS3ERR_BADHANDLE = 10001,
    NFS3ERR_NOT_SYNC = 10002,
    NFS3ERR_BAD_COOKIE = 10003,
    NFS3ERR_NOTSUPP = 10004,
    NFS3ERR_TOOSMALL = 10005,
    NFS3ERR_SERVERFAULT = 10006,
    NFS3ERR_BADTYPE = 10007,
    NFS3ERR_JUKEBOX = 10008,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
#[repr(u32)]
pub enum stable_how {
    UNSTABLE = 0,
    DATA_SYNC = 1,
    FILE_SYNC = 2,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct sattr3 {
    pub mode: set_mode3,
    pub uid: set_uid3,
    pub gid: set_gid3,
    pub size: set_size3,
    pub atime: set_atime,
    pub mtime: set_mtime,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum set_mode3 {
    mode(u32),
    Void,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum set_uid3 {
    uid(u32),
    Void,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum set_gid3 {
    gid(u32),
    Void,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum set_size3 {
    size(u64),
    Void,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum set_atime {
    SET_TO_SERVER_TIME,
    SET_TO_CLIENT_TIME(nfstime3),
    Void,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum set_mtime {
    SET_TO_SERVER_TIME,
    SET_TO_CLIENT_TIME(nfstime3),
    Void,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct sattrguard3 {
    pub check: bool,
    pub obj_ctime: u64,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct diropargs3 {
    pub dir: nfs_fh3,
    pub name: filename3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct GETATTR3args {
    pub object: nfs_fh3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct GETATTR3resok {
    pub obj_attributes: fattr3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum GETATTR3res {
    RES3_OK(GETATTR3resok),
    default(nfsstat3),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct SETATTR3args {
    pub object: nfs_fh3,
    pub new_attributes: sattr3,
    pub guard: sattrguard3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct SETATTR3resok {
    pub obj_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct SETATTR3resfail {
    pub obj_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum SETATTR3res {
    RES3_OK(SETATTR3resok),
    RES3ERR(nfsstat3, SETATTR3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct LOOKUP3args {
    pub what: diropargs3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct LOOKUP3resok {
    pub object: nfs_fh3,
    pub obj_attributes: post_op_attr,
    pub dir_attributes: post_op_attr,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct LOOKUP3resfail {
    pub dir_attributes: post_op_attr,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum LOOKUP3res {
    RES3_OK(LOOKUP3resok),
    RES3ERR(nfsstat3, LOOKUP3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct ACCESS3args {
    pub object: nfs_fh3,
    pub access: u32,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct ACCESS3resok {
    pub obj_attributes: post_op_attr,
    pub access: u32,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct ACCESS3resfail {
    pub obj_attributes: post_op_attr,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum ACCESS3res {
    RES3_OK(ACCESS3resok),
    RES3ERR(nfsstat3, ACCESS3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct READLINK3args {
    pub symlink: nfs_fh3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct READLINK3resok {
    pub symlink_attributes: post_op_attr,
    pub data: nfspath3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct READLINK3resfail {
    pub symlink_attributes: post_op_attr,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum READLINK3res {
    RES3_OK(READLINK3resok),
    RES3ERR(nfsstat3, READLINK3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct READ3args {
    pub file: nfs_fh3,
    pub offset: u64,
    pub count: u32,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct READ3resok {
    pub file_attributes: post_op_attr,
    pub count: u32,
    pub eof: bool,
    pub data: Vec<u8>,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct READ3resfail {
    pub file_attributes: post_op_attr,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum READ3res {
    RES3_OK(READ3resok),
    RES3ERR(nfsstat3, READ3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct WRITE3args {
    pub file: nfs_fh3,
    pub offset: u64,
    pub count: u32,
    pub stable: stable_how,
    pub data: Vec<u8>,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct WRITE3resok {
    pub file_wcc: wcc_data,
    pub count: u32,
    pub committed: stable_how,
    pub verf: writeverf3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct WRITE3resfail {
    pub file_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum WRITE3res {
    RES3_OK(WRITE3resok),
    RES3ERR(nfsstat3, WRITE3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct CREATE3args {
    pub where_: diropargs3,
    pub how: createhow3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum createhow3 {
    UNCHECKED(sattr3),
    GUARDED(sattr3),
    EXCLUSIVE(createverf3),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct CREATE3resok {
    pub obj: post_op_fh3,
    pub obj_attributes: wcc_data,
    pub dir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct CREATE3resfail {
    pub dir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum CREATE3res {
    RES3_OK(CREATE3resok),
    RES3ERR(nfsstat3, CREATE3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct MKDIR3args {
    pub where_: diropargs3,
    pub attributes: sattr3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct MKDIR3resok {
    pub obj: post_op_fh3,
    pub obj_attributes: wcc_data,
    pub dir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct MKDIR3resfail {
    pub dir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum MKDIR3res {
    RES3_OK(MKDIR3resok),
    RES3ERR(nfsstat3, MKDIR3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct SYMLINK3args {
    pub where_: diropargs3,
    pub symlink: symlinkdata3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct symlinkdata3 {
    pub symlink_attributes: sattr3,
    pub symlink_data: nfspath3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct SYMLINK3resok {
    pub obj: post_op_fh3,
    pub obj_attributes: wcc_data,
    pub dir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct SYMLINK3resfail {
    pub dir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum SYMLINK3res {
    RES3_OK(SYMLINK3resok),
    RES3ERR(nfsstat3, SYMLINK3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct MKNOD3args {
    pub where_: diropargs3,
    pub what: mknoddata3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct mknoddata3 {
    pub ftype: ftype3,
    pub attributes: sattr3,
    pub spec: specdata3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct MKNOD3resok {
    pub obj: post_op_fh3,
    pub obj_attributes: wcc_data,
    pub dir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct MKNOD3resfail {
    pub dir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum MKNOD3res {
    RES3_OK(MKNOD3resok),
    RES3ERR(nfsstat3, MKNOD3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct REMOVE3args {
    pub object: diropargs3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct REMOVE3resok {
    pub dir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct REMOVE3resfail {
    pub dir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum REMOVE3res {
    RES3_OK(REMOVE3resok),
    RES3ERR(nfsstat3, REMOVE3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct RMDIR3args {
    pub object: diropargs3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct RMDIR3resok {
    pub dir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct RMDIR3resfail {
    pub dir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum RMDIR3res {
    RES3_OK(RMDIR3resok),
    RES3ERR(nfsstat3, RMDIR3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct RENAME3args {
    pub from: diropargs3,
    pub to: diropargs3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct RENAME3resok {
    pub fromdir_wcc: wcc_data,
    pub todir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct RENAME3resfail {
    pub fromdir_wcc: wcc_data,
    pub todir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum RENAME3res {
    RES3_OK(RENAME3resok),
    RES3ERR(nfsstat3, RENAME3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct LINK3args {
    pub file: nfs_fh3,
    pub link: diropargs3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct LINK3resok {
    pub file_attributes: wcc_data,
    pub linkdir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct LINK3resfail {
    pub file_attributes: wcc_data,
    pub linkdir_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum LINK3res {
    RES3_OK(LINK3resok),
    RES3ERR(nfsstat3, LINK3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct READDIR3args {
    pub dir: nfs_fh3,
    pub cookie: cookie3,
    pub cookieverf: cookieverf3,
    pub count: u32,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct entry3 {
    pub fileid: fileid3,
    pub name: filename3,
    pub cookie: cookie3,
    pub nextentry: Option<Box<entry3>>,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct dirlist3 {
    pub entries: Option<entry3>,
    pub eof: bool,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct READDIR3resok {
    pub dir_attributes: post_op_attr,
    pub cookieverf: cookieverf3,
    pub reply: dirlist3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct READDIR3resfail {
    pub dir_attributes: post_op_attr,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum READDIR3res {
    RES3_OK(READDIR3resok),
    RES3ERR(nfsstat3, READDIR3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct READDIRPLUS3args {
    pub dir: nfs_fh3,
    pub cookie: cookie3,
    pub cookieverf: cookieverf3,
    pub dircount: u32,
    pub maxcount: u32,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct entryplus3 {
    pub fileid: fileid3,
    pub name: filename3,
    pub cookie: cookie3,
    pub name_attributes: post_op_attr,
    pub name_handle: post_op_fh3,
    pub nextentry: Option<Box<entryplus3>>,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct dirlistplus3 {
    pub entries: Option<entryplus3>,
    pub eof: bool,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct READDIRPLUS3resok {
    pub dir_attributes: post_op_attr,
    pub cookieverf: cookieverf3,
    pub reply: dirlistplus3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct READDIRPLUS3resfail {
    pub dir_attributes: post_op_attr,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum READDIRPLUS3res {
    RES3_OK(READDIRPLUS3resok),
    RES3ERR(nfsstat3, READDIRPLUS3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct FSSTAT3args {
    pub fsroot: nfs_fh3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct FSSTAT3resok {
    pub obj_attributes: post_op_attr,
    pub tbytes: u64,
    pub fbytes: u64,
    pub abytes: u64,
    pub tfiles: u64,
    pub ffiles: u64,
    pub afiles: u64,
    pub invarsec: u32,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct FSSTAT3resfail {
    pub obj_attributes: post_op_attr,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum FSSTAT3res {
    RES3_OK(FSSTAT3resok),
    RES3ERR(nfsstat3, FSSTAT3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct FSINFO3args {
    pub fsroot: nfs_fh3,
}

pub const FSF_LINK: u32 = 0x0001;
pub const FSF_SYMLINK: u32 = 0x0002;
pub const FSF_HOMOGENEOUS: u32 = 0x0008;
pub const FSF_CANSETTIME: u32 = 0x0010;

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct FSINFO3resok {
    pub obj_attributes: post_op_attr,
    pub rtmax: u32,
    pub rtpref: u32,
    pub rtmult: u32,
    pub wtmax: u32,
    pub wtpref: u32,
    pub wtmult: u32,
    pub dtpref: u32,
    pub maxfilesize: u64,
    pub time_delta: nfstime3,
    pub properties: u32,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct FSINFO3resfail {
    pub obj_attributes: post_op_attr,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum FSINFO3res {
    RES3_OK(FSINFO3resok),
    RES3ERR(nfsstat3, FSINFO3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct PATHCONF3args {
    pub object: nfs_fh3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct PATHCONF3resok {
    pub obj_attributes: post_op_attr,
    pub linkmax: u32,
    pub name_max: u32,
    pub no_trunc: bool,
    pub chown_restricted: bool,
    pub case_insensitive: bool,
    pub case_preserving: bool,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct PATHCONF3resfail {
    pub obj_attributes: post_op_attr,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum PATHCONF3res {
    RES3_OK(PATHCONF3resok),
    RES3ERR(nfsstat3, PATHCONF3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct COMMIT3args {
    pub file: nfs_fh3,
    pub offset: u64,
    pub count: u32,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct COMMIT3resok {
    pub file_wcc: wcc_data,
    pub verf: writeverf3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct COMMIT3resfail {
    pub file_wcc: wcc_data,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum COMMIT3res {
    RES3_OK(COMMIT3resok),
    RES3ERR(nfsstat3, COMMIT3resfail),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum post_op_attr {
    attributes(fattr3),
    Void,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum post_op_fh3 {
    handle(nfs_fh3),
    Void,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct wcc_attr {
    pub size: u64,
    pub mtime: nfstime3,
    pub ctime: nfstime3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum pre_op_attr {
    attributes(wcc_attr),
    Void,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct wcc_data {
    pub before: pre_op_attr,
    pub after: post_op_attr,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct SETCLIENTID3args {
    pub client: nfsclientid3,
    pub callback: cb_client3,
    pub callback_ident: u32,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct nfsclientid3 {
    pub id: Vec<u8>,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct cb_client3 {
    pub program: u32,
    pub location: nfsaddr3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct nfsaddr3 {
    pub addr: Vec<u8>,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct SETCLIENTID3resok {
    pub clientid: u64,
    pub verifier: createverf3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum SETCLIENTID3res {
    RES3_OK(SETCLIENTID3resok),
    RES3ERR(nfsstat3),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct SETCLIENTID_CONFIRM3args {
    pub clientid: u64,
    pub verifier: createverf3,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum SETCLIENTID_CONFIRM3res {
    RES3_OK,
    RES3ERR(nfsstat3),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct nfs_fh4 {
    pub data: Vec<u8>,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct compound_args {
    pub tag: Vec<u8>,
    pub minorversion: u32,
    pub argarray: Vec<nfs_argop3>,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum nfs_argop3 {
    OP_ACCESS(ACCESS3args),
    OP_COMMIT(COMMIT3args),
    OP_CREATE(CREATE3args),
    OP_FSINFO(FSINFO3args),
    OP_FSSTAT(FSSTAT3args),
    OP_GETATTR(GETATTR3args),
    OP_LINK(LINK3args),
    OP_LOOKUP(LOOKUP3args),
    OP_MKDIR(MKDIR3args),
    OP_MKNOD(MKNOD3args),
    OP_NULL,
    OP_READ(READ3args),
    OP_READDIR(READDIR3args),
    OP_READDIRPLUS(READDIRPLUS3args),
    OP_REMOVE(REMOVE3args),
    OP_RENAME(RENAME3args),
    OP_RMDIR(RMDIR3args),
    OP_SETATTR(SETATTR3args),
    OP_SETCLIENTID(SETCLIENTID3args),
    OP_SETCLIENTID_CONFIRM(SETCLIENTID_CONFIRM3args),
    OP_SYMLINK(SYMLINK3args),
    OP_WRITE(WRITE3args),
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct compound_res {
    pub status: nfsstat3,
    pub tag: Vec<u8>,
    pub resarray: Vec<nfs_resop3>,
}

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub enum nfs_resop3 {
    OP_ACCESS(ACCESS3res),
    OP_COMMIT(COMMIT3res),
    OP_CREATE(CREATE3res),
    OP_FSINFO(FSINFO3res),
    OP_FSSTAT(FSSTAT3res),
    OP_GETATTR(GETATTR3res),
    OP_LINK(LINK3res),
    OP_LOOKUP(LOOKUP3res),
    OP_MKDIR(MKDIR3res),
    OP_MKNOD(MKNOD3res),
    OP_NULL,
    OP_READ(READ3res),
    OP_READDIR(READDIR3res),
    OP_READDIRPLUS(READDIRPLUS3res),
    OP_REMOVE(REMOVE3res),
    OP_RENAME(RENAME3res),
    OP_RMDIR(RMDIR3res),
    OP_SETATTR(SETATTR3res),
    OP_SETCLIENTID(SETCLIENTID3res),
    OP_SETCLIENTID_CONFIRM(SETCLIENTID_CONFIRM3res),
    OP_SYMLINK(SYMLINK3res),
    OP_WRITE(WRITE3res),
}